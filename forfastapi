from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String
from databases import Database
from contextlib import asynccontextmanager

DATABASE_URL = "mysql://hbg:7346&&&&&&&&@127.0.0.1:3306/sys"

database = Database(DATABASE_URL)
metadata = MetaData()

assetinfos = Table(
    "assetinfos",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String(255)),
    Column("description", String(255)),
)

engine = create_engine(DATABASE_URL)
metadata.create_all(engine)

app = FastAPI()

# 使用 lifespan 事件处理器来管理数据库连接
@asynccontextmanager
async def lifespan(app: FastAPI):
    # 启动时连接数据库
    await database.connect()
    yield
    # 关闭时断开数据库连接
    await database.disconnect()

app = FastAPI(lifespan=lifespan)

@app.post("/query")
async def query_assetinfos(username: str = Query(...)):  # 这里使用 Query 来接收查询参数
    query = assetinfos.select().where(assetinfos.c.name == username)
    result = await database.fetch_all(query)
    if not result:
        raise HTTPException(status_code=404, detail="Item not found")
    return result
